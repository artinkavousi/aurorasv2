"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  default: () => plainText
});
module.exports = __toCommonJS(src_exports);
var import_magic_string = require("@napi-rs/magic-string");
var import_minimatch = __toESM(require("minimatch"));
var import_fs = __toESM(require("fs"));
var import_fast_glob = __toESM(require("fast-glob"));
var testMatch = (match, testId) => typeof match === "string" && (0, import_minimatch.default)(testId, match) || match instanceof RegExp && match.test(testId) || Array.isArray(match) && match.some((m) => testMatch(m, testId));
var defaultPlainTextOptions = { namedExport: "plainText", dtsAutoGen: false, distAutoClean: false };
function plainText(match, options) {
  const plainTextOptions = __spreadValues(__spreadValues({}, defaultPlainTextOptions), options);
  const dtsBanner = `/** Generated by vite-plugin-plain-text, don't touch it **/`;
  if (plainTextOptions.distAutoClean) {
    const dtsFiles = import_fast_glob.default.sync(["**/*.d.ts"], { ignore: ["node_modules"] });
    for (const dtsFile of dtsFiles) {
      if (import_fs.default.readFileSync(dtsFile, { encoding: "utf-8" }).startsWith(dtsBanner)) {
        import_fs.default.unlinkSync(dtsFile);
      }
    }
  }
  return {
    name: "plain text",
    transform(code, id) {
      if (typeof match === "function" ? match.call(this, code, id) : testMatch(match, id)) {
        const magicString = new import_magic_string.MagicString(code);
        {
          const transformed = plainTextOptions.namedExport ? `export const ${plainTextOptions.namedExport} = ${JSON.stringify(code)}` : `const plainText = ${JSON.stringify(code)}
export default plainText`;
          magicString.overwrite(0, code.length, transformed);
        }
        if (plainTextOptions.dtsAutoGen) {
          const dtsFile = id + ".d.ts";
          if (import_fs.default.existsSync(dtsFile) && !import_fs.default.readFileSync(dtsFile, { encoding: "utf-8" }).startsWith(dtsBanner)) {
            console.warn(`Type declaration auto generation failed, please check file '${dtsFile}' can be maintained by vite-plugin-plain-text`);
          } else {
            const typeDeclaration = plainTextOptions.namedExport ? `export const ${plainTextOptions.namedExport}: string` : `const plainText: string
export default plainText`;
            import_fs.default.writeFileSync(id + ".d.ts", dtsBanner + "\n\n" + typeDeclaration);
          }
        }
        const sourcemap = this.getCombinedSourcemap();
        return {
          code: magicString.toString(),
          map: magicString.generateMap({ file: sourcemap.file, source: sourcemap.sources[0], includeContent: true }).toMap()
        };
      }
    }
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});

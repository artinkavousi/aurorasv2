import { Plugin } from 'vite';

type TransformContext = ThisParameterType<Plugin['transform']>;
type Match = string | RegExp | Match[];
type MatchFn = (this: TransformContext, code: string, id: string) => boolean;
type PlainTextOptions = {
    namedExport?: string | false;
    dtsAutoGen?: boolean;
    distAutoClean?: boolean;
};
/**
 * @param {string | RegExp | (string | RegExp)[] | Function} match - Predicate the module id(file name) matches and will be treat as plain text.
 * @note You can also pass a matching-predicator with this signature `(this: vite transform context, code: string, id: file name string) => void`.
 * @param {object=} [plainTextOptions={ namedExport: 'plainText', dtsAutoGen: false, distAutoClean: false }]
 * @param {string|false=} [plainTextOptions.namedExport='plainText'] - Specify the name of the named exporting or you can pass falsy value to use the default exporting.
 * @param {boolean=} [plainTextOptions.dtsAutoGen=false] - generate dts file for plain text file automatically.
 * @param {boolean=} [plainTextOptions.distAutoClean=false] - clean up the generated dts file after this plugin startup each time.
 * @returns Configured plugin
 */
declare function plainText(match: Match | MatchFn, options?: PlainTextOptions): Plugin;

export { plainText as default };
